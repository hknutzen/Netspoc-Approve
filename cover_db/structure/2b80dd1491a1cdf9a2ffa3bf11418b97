{"pod":[[65,"get_parse_info"],[341,"parse_object_group"],[351,"parse_address"],[357,"adjust_mask"],[362,"parse_encryption"],[371,"postprocess_config"],[548,"get_identity"],[557,"get_config_from_device"],[575,"cmd_check_error"],[596,"parse_version"],[608,"set_terminal"],[617,"prepare_device"],[653,"write_mem"],[688,"schedule_reload"],[717,"cancel_reload"],[762,"handle_reload_banner"],[813,"get_my_connection"],[877,"is_device_access"],[887,"resequence_cmd"],[898,"crypto_struct_equal"],[1061,"crypto_processing"],[1215,"transfer"]],"digest":"2b80dd1491a1cdf9a2ffa3bf11418b97","branch":[[342,{"text":"if (check_regex('object-group', $arg)) { }"}],[364,{"text":"if (defined(my $bits = check_int($arg)))"}],[385,{"text":"if keys %$hash"}],[379,{"text":"if ($$p{'ROUTING'})"}],[395,{"text":"unless my $group_name = ref $what && $$what{'GROUP_NAME'}"}],[396,{"text":"unless my $group = $$object_groups{$group_name}"}],[406,{"text":"if ($$p{'CRYPTO'}{'ISAKMP'} and my $policies = $$p{'CRYPTO'}{'ISAKMP'}{'POLICY'})"}],[417,{"text":"if (my $map = $$p{'CRYPTO'}{'MAP'}{$imap}) { }"}],[428,{"text":"if (my $def = $$p{'CRYPTO'}{'IPSEC'}{'CLIENT_EZVPN'}{$ezvpn}) { }"}],[415,{"text":"if (my $imap = $$intf{'CRYPTO_MAP'}) { }"}],[415,{"text":"elsif ($$intf{'EZVPN'}) { }"}],[437,{"text":"if ($crypto_map_found and $ezvpn_client_found)"}],[443,{"text":"unless ($map_used{$cm_name})"}],[452,{"text":"if $$entry{'GDOI'}"}],[454,{"text":"if (my $acl = $$p{'ACCESS_LIST'}{$acl_name}) { }"}],[453,{"text":"if (my $acl_name = $$entry{'MATCH_ADDRESS'}) { }"}],[470,{"text":"if (my $acl = $$p{'ACCESS_LIST'}{$acl_name}) { }"}],[469,{"text":"if (my $acl_name = $$entry{\"ACCESS_GROUP_$what\"})"}],[478,{"text":"if (my $peers = $$entry{'PEER'}) { }"}],[485,{"text":"if (my $trans = $$p{'CRYPTO'}{'IPSEC'}{'TRANSFORM'}{$trans_name}) { }"}],[484,{"text":"if (my $trans_name = $$entry{'TRANSFORM'})"}],[503,{"text":"unless ($ezvpn_used{$ez_name})"}],[511,{"text":"if (my $acl = $$p{'ACCESS_LIST'}{$acl_name}) { }"}],[510,{"text":"if (my $acl_name = $$entry{'ACL'}) { }"}],[527,{"text":"if ($$p{'IF'}{$intf}) { }"}],[525,{"text":"if (my $num = $$entry{'V_INTERFACE'}) { }"}],[536,{"text":"if (my $peers = $$entry{'PEER'}) { }"}],[441,{"text":"if ($crypto_map_found) { }"}],[441,{"text":"elsif ($ezvpn_client_found) { }"}],[580,{"text":"if ($line =~ /$regex/)"}],[585,{"text":"if ($line =~ /$regex/)"}],[598,{"text":"if ($output =~ /Software .* Version +(\\d+\\.\\d+[\\w\\d\\(\\)]+)/)"}],[601,{"text":"if ($output =~ /(cisco\\s+\\S+) .*memory/i)"}],[631,{"text":"if @$lines"}],[620,{"text":"unless ($$self{'COMPARE'})"}],[663,{"text":"if ($$lines[-1] =~ /\\[OK\\]/) { }"}],[672,{"text":"if (not $retries) { }"}],[662,{"text":"if ($$lines[0] =~ /^Building configuration/) { }"}],[662,{"text":"elsif (grep {$_ =~ /startup-config file open failed/i;} @$lines) { }"}],[689,{"text":"if $$self{'COMPARE'}"}],[694,{"text":"if $self->check_conf_mode"}],[698,{"text":"if ($out =~ /save/i)"}],[718,{"text":"unless $$self{'RELOAD_SCHEDULED'}"}],[724,{"text":"if ($force)"}],[738,{"text":"if $self->check_conf_mode"}],[787,{"text":"if ($prefix =~ / \\n $/msx and $postfix eq '\\\\r\\\\n') { }"}],[787,{"text":"elsif (not $prefix and $postfix =~ /^ [\\r\\n]* $/sx) { }"}],[769,{"text":"if ($$output_ref =~ /\n\f\t^ (.*?)\t\t       # Prefix from original command\n\f  \t(?:\\r\\n{1,2}){3}       # 3 empty lines\n\f  \t\\x07 [*]{3}\\r\\n        # BELL + ***\n\f  \t[*]{3} ([^\\r\\n]+) \\r\\n # *** Message\n\f  \t[*]{3}\\r\\n             # ***\n\f\t(.*) $                 # Postfix from original command\n\f \t/sx)"}],[814,{"text":"if (my $cached = $$self{'CONNECTION'})"}],[822,{"text":"$ip ? :"}],[819,{"text":"unless ($$self{'CONSOLE'})"}],[840,{"text":"if $self->check_conf_mode and not $$self{'COMPARE'}"}],[845,{"text":"if ($line =~ /^\\*\\D*(\\d+).*?([\\d.]+)$/) { }"}],[851,{"text":"unless my $src_ip = quad2int($s_ip)"}],[855,{"text":"if $self->check_conf_mode and not $$self{'COMPARE'}"}],[859,{"text":"if ($line =~ /Local host:\\s([\\d.]+),\\sLocal port:\\s(\\d+)/i) { }"}],[865,{"text":"unless my $dst_ip = quad2int($d_ip)"}],[878,{"text":"if $$conf_entry{'MODE'} eq 'deny'"}],[904,{"text":"if $conf eq $spoc"}],[903,{"text":"if (not ref $spoc) { }"}],[915,{"text":"if $self->crypto_struct_equal($$conf, $$spoc, $changes, $indent)"}],[914,{"text":"if (ref $spoc eq 'SCALAR') { }"}],[932,{"text":"unless ($self->crypto_struct_equal($$conf[$i], $$spoc[$i], $changes, $indent))"}],[929,{"text":"if (@$conf == @$spoc) { }"}],[926,{"text":"if (ref $spoc eq 'ARRAY') { }"}],[959,{"text":"unless my $sequ = $$conf{'SEQU'}"}],[966,{"text":"unless ($self->acl_equal($$conf{'FILTER_ACL'}{'LIST'}, $$spoc{'FILTER_ACL'}{'LIST'}, $conf_acl, $spoc_acl, $key))"}],[965,{"text":"if ($spoc_acl) { }"}],[994,{"text":"unless ($self->acl_equal($$conf{'MATCH_ACL'}{'LIST'}, $$spoc{'MATCH_ACL'}{'LIST'}, $$conf{$key}, $$spoc{$key}, $key))"}],[1008,{"text":"unless ($self->crypto_struct_equal($$conf{$key}, $$spoc{$key}, $changes, $indent))"}],[991,{"text":"if ($key eq 'MATCH_ADDRESS') { }"}],[958,{"text":"if ($key =~ /^ACCESS_GROUP_(IN|OUT)$/) { }"}],[958,{"text":"elsif ($key =~ /^(?:name|orig|line|\n\f\t\t\t\t  FILTER_ACL|MATCH_ACL|SEQU|TRANSFORM)$/x) { }"}],[958,{"text":"elsif (exists $$spoc{$key}) { }"}],[1031,{"text":"unless my $sequ = $$conf{'SEQU'}"}],[1026,{"text":"if (exists $$conf{$key}) { }"}],[1026,{"text":"elsif ($key =~ /^ACCESS_GROUP_(IN|OUT)$/) { }"}],[1026,{"text":"elsif ($key =~ /^(?:name|orig|line|\n\f\t\t\t\t  FILTER_ACL|MATCH_ACL|SEQU|TRANSFORM)$/x) { }"}],[955,{"text":"if (ref $spoc eq 'HASH') { }"}],[902,{"text":"if (not ref $conf) { }"}],[902,{"text":"elsif (ref $conf eq 'SCALAR') { }"}],[902,{"text":"elsif (ref $conf eq 'ARRAY') { }"}],[902,{"text":"elsif (ref $conf eq 'HASH') { }"}],[1064,{"text":"unless keys %{$$spoc{'CRYPTO'};}"}],[1072,{"text":"if ($self->crypto_struct_equal($conf_isakmp, $spoc_isakmp, $changes, '')) { }"}],[1071,{"text":"if (my $conf_isakmp = $$conf{'CRYPTO'}{'ISAKMP'}) { }"}],[1068,{"text":"if (my $spoc_isakmp = $$spoc{'CRYPTO'}{'ISAKMP'})"}],[1102,{"text":"if ($$conf{'IF'}{$intf}{'CRYPTO_MAP'})"}],[1097,{"text":"if ($$spoc{'IF'}{$intf}{'CRYPTO_MAP'}) { }"}],[1112,{"text":"unless ($conf_map_name)"}],[1119,{"text":"unless ($self->crypto_struct_equal($$conf{'CRYPTO'}{'MAP'}{$conf_map_name}, $$spoc{'CRYPTO'}{'MAP'}{$spoc_map_name}, $changes, ''))"}],[1136,{"text":"$access_group =~ /_IN$/ ? :"}],[1143,{"text":"if ($conf_acl)"}],[1146,{"text":"if ($spoc_acl) { }"}],[1165,{"text":"if (keys %remove_acls)"}],[1089,{"text":"if ($$spoc{'CRYPTO'}{'MAP'})"}],[1186,{"text":"if ($self->crypto_struct_equal($$conf{'CRYPTO'}{'IPSEC'}, $$spoc{'CRYPTO'}{'IPSEC'}, $changes, '')) { }"}],[1184,{"text":"if (exists $$conf{'CRYPTO'}{'IPSEC'}) { }"}],[1178,{"text":"if (exists $$spoc{'CRYPTO'}{'IPSEC'})"}]],"subroutine":[[30,"BEGIN"],[31,"BEGIN"],[32,"BEGIN"],[33,"BEGIN"],[34,"BEGIN"],[65,"get_parse_info"],[341,"parse_object_group"],[351,"parse_address"],[357,"adjust_mask"],[362,"parse_encryption"],[371,"postprocess_config"],[548,"get_identity"],[557,"get_config_from_device"],[575,"cmd_check_error"],[596,"parse_version"],[608,"set_terminal"],[617,"prepare_device"],[653,"write_mem"],[688,"schedule_reload"],[717,"cancel_reload"],[762,"handle_reload_banner"],[813,"get_my_connection"],[877,"is_device_access"],[887,"resequence_cmd"],[898,"crypto_struct_equal"],[1061,"crypto_processing"],[1215,"transfer"]],"start":{"-1":{"__COVER__":[{"branch":99,"subroutine":27,"statement":422,"time":null,"pod":22,"condition":12}]},"32":{"BEGIN":[{"condition":null,"pod":null,"subroutine":2,"time":null,"statement":6,"branch":null}]},"34":{"BEGIN":[{"branch":null,"statement":12,"time":null,"subroutine":4,"pod":null,"condition":null}]},"717":{"cancel_reload":[{"branch":42,"subroutine":19,"time":null,"statement":206,"pod":14,"condition":6}]},"557":{"get_config_from_device":[{"condition":6,"pod":7,"time":null,"statement":134,"subroutine":12,"branch":29}]},"617":{"prepare_device":[{"condition":6,"pod":11,"statement":159,"time":null,"subroutine":16,"branch":33}]},"813":{"get_my_connection":[{"branch":48,"time":null,"statement":237,"subroutine":21,"pod":16,"condition":8}]},"31":{"BEGIN":[{"condition":null,"pod":null,"subroutine":1,"statement":3,"time":null,"branch":null}]},"341":{"parse_object_group":[{"branch":null,"time":null,"statement":26,"subroutine":6,"pod":1,"condition":null}]},"653":{"write_mem":[{"pod":12,"condition":6,"branch":35,"subroutine":17,"time":null,"statement":174}]},"371":{"postprocess_config":[{"pod":5,"condition":1,"branch":2,"time":null,"statement":39,"subroutine":10}]},"887":{"resequence_cmd":[{"condition":12,"pod":18,"subroutine":23,"statement":276,"time":null,"branch":58}]},"65":{"get_parse_info":[{"branch":null,"statement":15,"time":null,"subroutine":5,"pod":null,"condition":null}]},"548":{"get_identity":[{"subroutine":11,"statement":130,"time":null,"branch":29,"condition":6,"pod":6}]},"1215":{"transfer":[{"branch":99,"subroutine":26,"time":null,"statement":419,"pod":21,"condition":12}]},"30":{"BEGIN":[{"branch":null,"subroutine":null,"time":null,"statement":null,"pod":null,"condition":null}]},"1061":{"crypto_processing":[{"time":null,"statement":339,"subroutine":25,"branch":83,"condition":12,"pod":20}]},"596":{"parse_version":[{"pod":9,"condition":6,"branch":31,"statement":150,"time":null,"subroutine":14}]},"33":{"BEGIN":[{"subroutine":3,"statement":9,"time":null,"branch":null,"condition":null,"pod":null}]},"608":{"set_terminal":[{"pod":10,"condition":6,"branch":33,"time":null,"statement":156,"subroutine":15}]},"762":{"handle_reload_banner":[{"condition":6,"pod":15,"subroutine":20,"statement":222,"time":null,"branch":45}]},"877":{"is_device_access":[{"branch":57,"subroutine":22,"statement":272,"time":null,"pod":17,"condition":11}]},"575":{"cmd_check_error":[{"branch":29,"statement":136,"time":null,"subroutine":13,"pod":8,"condition":6}]},"898":{"crypto_struct_equal":[{"branch":58,"subroutine":24,"time":null,"statement":278,"pod":19,"condition":12}]},"351":{"parse_address":[{"condition":null,"pod":2,"time":null,"statement":30,"subroutine":7,"branch":1}]},"688":{"schedule_reload":[{"pod":13,"condition":6,"branch":39,"subroutine":18,"statement":192,"time":null}]},"357":{"adjust_mask":[{"branch":1,"time":null,"statement":32,"subroutine":8,"pod":3,"condition":1}]},"362":{"parse_encryption":[{"pod":4,"condition":1,"branch":1,"statement":34,"time":null,"subroutine":9}]}},"condition":[[353,{"type":"or_3","op":"||","right":"$self->SUPER::parse_address($arg)","left":"$self->parse_object_group($arg)"}],[382,{"left":"$$entry{'VRF'}","op":"||","type":"or_2","right":"''"}],[395,{"type":"and_3","op":"&&","right":"$$what{'GROUP_NAME'}","left":"ref $what"}],[406,{"type":"and_3","right":"my $policies = $$p{'CRYPTO'}{'ISAKMP'}{'POLICY'}","op":"and","left":"$$p{'CRYPTO'}{'ISAKMP'}"}],[410,{"left":"$$policy{'HASH'}","type":"or_2","op":"||=","right":"'sha'"}],[437,{"left":"$crypto_map_found","type":"and_3","right":"$ezvpn_client_found","op":"and"}],[787,{"left":"$prefix =~ / \\n $/msx","type":"and_3","op":"and","right":"$postfix eq '\\\\r\\\\n'"}],[787,{"op":"and","type":"and_3","right":"$postfix =~ /^ [\\r\\n]* $/sx","left":"not $prefix"}],[821,{"op":"||","type":"or_2","right":"'1.2.3.4'","left":"$$self{'IP'}"}],[840,{"left":"$self->check_conf_mode","right":"not $$self{'COMPARE'}","type":"and_3","op":"and"}],[855,{"op":"and","type":"and_3","right":"not $$self{'COMPARE'}","left":"$self->check_conf_mode"}],[881,{"op":"&&","type":"and_3","right":"$self->services_a_in_b($device_proto, $conf_entry)","left":"$self->ip_netz_a_in_b($device_src, $$conf_entry{'SRC'}) && $self->ip_netz_a_in_b($device_dst, $$conf_entry{'DST'})"}]],"file":"lib/Netspoc/Approve/IOS.pm","statement":[30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,65,66,331,332,332,333,333,334,334,335,337,341,342,343,346,351,353,357,358,362,363,364,365,367,371,373,374,375,379,380,381,381,382,383,383,385,389,390,391,392,392,393,394,395,396,399,406,409,410,414,414,415,416,417,418,421,426,427,428,429,432,437,438,441,442,442,443,444,445,447,448,448,449,450,451,452,453,454,457,460,464,468,469,470,471,474,478,479,479,482,484,485,490,493,501,502,502,503,504,505,507,510,511,514,517,521,525,526,527,530,534,536,537,537,540,548,551,552,553,557,558,575,576,578,579,579,580,581,584,584,585,586,587,590,592,596,597,598,599,601,602,608,609,612,617,618,620,621,624,625,630,631,632,633,636,637,640,641,642,653,654,657,658,659,660,661,662,663,664,665,668,662,672,673,676,678,682,688,689,691,692,693,694,695,698,699,703,707,708,709,713,717,718,724,725,726,729,735,736,737,738,739,740,743,744,745,748,762,769,779,780,781,782,787,788,795,796,797,798,799,804,808,813,814,815,819,820,821,822,823,826,827,839,840,841,842,843,844,845,846,849,851,854,855,856,857,858,859,860,863,865,866,867,868,869,872,873,877,878,879,881,887,888,898,899,902,903,904,907,908,910,911,914,915,919,920,922,923,926,929,930,931,932,938,939,942,945,949,950,952,955,956,957,958,959,960,961,965,966,974,975,982,991,994,1003,1004,1008,1015,1016,1021,1022,1025,1026,1031,1032,1033,1041,1042,1045,1048,1049,1051,1054,1057,1061,1064,1064,1066,1067,1068,1069,1070,1071,1072,1078,1081,1085,1087,1089,1090,1093,1093,1095,1096,1097,1098,1101,1102,1103,1104,1106,1108,1111,1112,1113,1114,1115,1117,1118,1119,1127,1128,1129,1131,1134,1135,1136,1137,1137,1138,1140,1141,1142,1143,1144,1146,1147,1148,1149,1150,1152,1153,1154,1155,1156,1159,1165,1166,1168,1169,1170,1171,1173,1174,1178,1183,1184,1185,1186,1194,1197,1198,1202,1204,1215,1216,1217]}