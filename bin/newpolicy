#!/bin/bash
# newpolicy -- Call 'suid-newpolicy' to process next policy.
#
# This script allows unprivileged users to call newpolicy.sh.
# If newpolicy.sh already runs, it waits for it to be finished.
# Afterwards the output of newpolicy.sh is shown.
#
# https://github.com/hknutzen/Netspoc-Approve
# (c) 2025 by Heinz Knutzen <heinz.knutzen@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

BASE=$(get-netspoc-approve-conf basedir)
POLICYDB=$BASE/policies
CURRENT=$POLICYDB/current
LOCK=$POLICYDB/LOCK

msg () { echo $@ >&2; }

START=$(date +%s%4N)
msg "Processing scheduled"
sudo-newpolicy&
# Check wait status to see if new process was started.
wait $! || {
    # Otherwise wait for already running process to be finished.
    msg "Process is already running"
    flock -s $LOCK -c true
}

[ $(date -r $LOCK +%s%4N) -le $START ] && msg "Nothing changed"
if [ -f $POLICYDB/failed ] ; then
    cat $POLICYDB/next/compile.log >&2
else
    msg "Current policy is $(basename $(readlink $CURRENT))"
fi
