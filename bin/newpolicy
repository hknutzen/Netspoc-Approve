#!/bin/bash
# newpolicy -- Wrapper script for newpolicy.pl or for suid-newpolicy
#
# This script allows multiple users to request a run of newpolicy.pl.
# It handles parallel calls from multiple users.
# It starts only a single process of newpolicy.pl,
# but shows output of running processes to multiple users.
#
# https://github.com/hknutzen/Netspoc-Approve
# (c) 2024 by Heinz Knutzen <heinz.knutzen@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

PROG=suid-newpolicy
POLICYDB=$(get-netspoc-approve-conf netspocdir)
LOCK=$POLICYDB/LOCK
CURRENT=$POLICYDB/current
NEXT=$POLICYDB/next
LOG=$NEXT/compile.log

# Exists if compile failed and compile.log may be outdated.
FAILED=$POLICYDB/failed

msg   () { echo $@ >&2; }
abort () { echo $@ >&2; exit 1; }

[ -n "$(type $PROG)" ] || abort "Can't find command '$PROG'"

# true  (0): all changes from repository have already been processed
# false (1): SRC isn't up to date
uptodate () {
    [ -d $SRC ] || return 1

    # Must use relative pathname for suid-cvs.
    # Check stdout for changed files.
    # Check stderr for removed files and for new directories.
    # Ignore '.cvsrc' to not accidently activate option '-P'.
    # Ok, if nothing is found.
    [ -z "$(cd $SRC && cvs -n -q -f update 2>&1)" ]
}

# Wait as long as newpolicy.pl is running.
# Then show message about success.
wait_newpolicy_finished () {
    # If LOCK becomes available, we know that script has finished.
    flock -s $LOCK -c true 2>/dev/null
    if [ -f $FAILED ] ; then
        cat $POLICYDB/next/compile.log >&2
    else
        msg "Finished '$(basename $(readlink -f $POLICYDB/current))'"
    fi
}

# Filehandle "9" is set below at end of this if-clause.
# Try to get shared lock.
# Other instances of this script are allowed to get the lock,
# but newpolicy.pl isn't.
if flock -n -s 9 ; then

    # We got the lock.
    # newpolicy.pl isn't running.
    POLICY=$(basename $(readlink $CURRENT || echo 'unknown'))
    SRC=$POLICYDB/$POLICY/src
    if uptodate ; then

        # No pending changes in repository.
        msg "Newest changeset is already available as current $POLICY"
        exit
    fi
else

    # newpolicy.pl is already running
    SRC=$POLICYDB/next/src
    if ! [ -d $SRC/CVS ] || uptodate ; then
        msg "Newest changeset is currently processed"
        wait_newpolicy_finished
        exit
    fi
    msg "Waiting for current process to be finished"
    wait_newpolicy_finished

fi 9<$LOCK

# Start newpolicy.pl in background.
# Process must not be terminated if this script is killed.
msg "Processing current changeset"
$PROG </dev/null >/dev/null 2>&1 &

sleep 0.1 # Wait until $PROG has set lock.
wait_newpolicy_finished
