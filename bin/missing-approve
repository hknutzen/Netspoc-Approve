#!/bin/sh
# missing-approve -- Show devices with missing approve.
#
# https://github.com/hknutzen/Netspoc-Approve
# (c) 2014 by Heinz Knutzen <heinz.knutzen@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Abort on unexpected errors.
set -e

POLICYDB=$(get-netspoc-approve-conf netspocdir)
STATUS=$(get-netspoc-approve-conf statusdir)
POLICY=$(basename $(readlink $POLICYDB/current))
CODE=$POLICYDB/$POLICY/code

exit_code=0;

missing () { echo $1; }

compare_files () {
    if [ -f $1 ] ; then
        cat $1
    elif [ -f $1.bz2 ] ; then
        bzcat $1.bz2
    elif [ -f $1.gz ] ; then
        zcat $1.gz
    else
        cat /dev/null
    fi | diff -I 'Generated by' -q - $2 > /dev/null ||
    { missing $device; continue; }      # continue outer loop.
    # This prevents printing of duplicate router names,
    # if config and raw both have changed.
}

cd $CODE

# Collect all devices, ipv4 and ipv6.
DEVICES=""
for device in * ; do
    case $device in *.*|\*) continue;; esac
if [ -d $device ] ; then
    cd $CODE/$device;
    for device in * ; do
               case $device in *.*|\*) continue;; esac
               if [ ! -e $CODE/$device ]; then
                   DEVICES="${DEVICES} $device";
               fi
    done
    cd $CODE;
else
    DEVICES="${DEVICES} $device";
fi
done

for device in ${DEVICES}; do
    case $device in *.*|\*) continue;; esac
    file=$STATUS/$device
    if [ ! -r $file ] ; then
        # Device has never been approved
        missing $device
        continue
    fi

    # Check status of last approve
    # OK|***WARNINGS***|***ERRORS***|***UNFINISHED APPROVE***
    case $(cut -d';' -f4 $file) in
        OK|\*\*\*WARNINGS\*\*\*)
            # This policy has been approved to device
            approved=$(cut -d';' -f3 $file)
            # UNIX time of successful approve
            atime=$(cut -d';' -f17 $file)
            ;;
        *)
            # There had been errors during last approve
            atime=0
            ;;

    esac
    # Check status of last Compare: DIFF|UPTODATE
    status=$(cut -d';' -f13 $file)
    # Find policy used during compare.
    case $status in
        DIFF|UPTODATE)
            compared=$(cut -d';' -f14 $file)
            # UNIX time of last compare
            ctime=$(cut -d';' -f16 $file)
            ;;
        *)
            ctime=0
            ;;

    esac

    # Both failed
    if [ $atime = 0 -a $ctime = 0 ] ; then
        missing $device
        continue
    # Take newer successful policy
    elif [ $atime -gt $ctime ] ; then
        last=$approved
    elif [ $status = 'UPTODATE' ] ; then
        last=$compared
    else
        missing $device
        continue
    fi

    # If device' policy is equal to current policy, we are finished.
    [ $last = $POLICY ] && continue

    # Compare Netspoc code of device policy with Netspoc code of current policy.
    lcode=$POLICYDB/$last/code/$device
    [ -f $device ] && compare_files $lcode $device;

    # Compare .raw files, if available.
    [ -f $device.raw ] && compare_files $lcode.raw $device.raw

    lcode=$POLICYDB/$last/code/ipv6/$device
    [ -f ipv6/$device ] && compare_files $lcode ipv6/$device;

    # Compare .raw files, if available.
    [ -f ipv6/$device.raw ] && compare_files $lcode.raw ipv6/$device.raw

done

# Exit with status 1, if at least one error occured.
exit $exit_code
